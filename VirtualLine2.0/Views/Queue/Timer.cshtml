<head>
    <link href="https://fonts.googleapis.com/css2?family=Comfortaa:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>

<div class="jumbotron text-center banner-background"
     style="@(String.IsNullOrEmpty(ViewBag.BannerPicturePath) ?
             "min-width: 300px;" :
             $"")">
    <div style="margin-bottom: 10px">
        @if (!String.IsNullOrEmpty(ViewBag.ProfilePicturePath))
        {
            <img src="@ViewBag.ProfilePicturePath" onerror="this.onerror=null; this.src='@ViewBag.DefaultProfilePicturePath';" alt="Profile Picture" style="max-width: 100px; max-height: 100px; border-radius: 50%;" />
        }
        else
        {
            <img src="@ViewBag.DefaultProfilePicturePath" alt="Profile Picture" style="max-width: 100px; max-height: 100px; border-radius: 50%;" />
        }
    </div>
    <div>
        <h1 style="font-family: 'Comfortaa'; color: #000000; text-shadow: 0 0 15px rgb(255 255 255);">@ViewBag.Title</h1>
    </div>
</div>

<div class="jumbotron text-center" style="background-color: transparent; color: #FFFFFF; border-color: transparent; font-family: 'Comfortaa'">
    <h3 style="font-family: 'Comfortaa'; color: #FFFFFF">Your turn is coming up!</h3>
    <h5 style="font-family: 'Comfortaa'; color: #FFFFFF">You must be ready to enter before the timer expires or else your spot in line will be terminated. You will not receive a refund and you will not be permitted entry into the venue.</h5>
    <h1 style="margin-top: 7.5%; font-family: 'Comfortaa'; color: #FFFFFF" id="timer"></h1>

    <div style="margin-top: 7.5%">
        <button class="btn btn-blue-md" id="checkLocationButton">I am here</button>

        @using (Html.BeginForm("GetExtendConfirmation", "Queue", FormMethod.Post))
        {
            <button class="btn btn-blue-md" type="submit">Extend Time</button>
        }
    </div>
</div>



<script>
    // Function to check the server timer
    function checkServerTimer() {
        fetch('@Url.Action("CheckTimer", "Queue", new { isFromTimerPage = true })')
            .then(response => response.json())
            .then(data => {
                if (data.expired) {
                    clearInterval(timerId);
                    window.location.href = '@Url.Action("RemovedFromLine", "Queue", new { username = ViewBag.username })';
                } else {
                    updateTimerDisplay(data.timeLeft);
                }
            })
            .catch(error => console.error('Error:', error));
    }

    // Function to update the timer display
    function updateTimerDisplay(seconds) {
        var minutes = parseInt(seconds / 60, 10);
        var seconds = parseInt(seconds % 60, 10);

        minutes = minutes < 10 ? "0" + minutes : minutes;
        seconds = seconds < 10 ? "0" + seconds : seconds;

        document.getElementById('timer').textContent = minutes + ":" + seconds;
    }

    // Check server timer immediately when the page loads
    checkServerTimer();

    // Continue checking the server timer every second
    var timerId = setInterval(checkServerTimer, 1000);
</script>

<script>
    var barLatitude = @ViewBag.Latitude;
    var barLongitude = @ViewBag.Longitude;

    document.getElementById('checkLocationButton').addEventListener('click', function() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                var userLatitude = position.coords.latitude;
                var userLongitude = position.coords.longitude;
                var distance = calculateDistance(userLatitude, userLongitude, barLatitude, barLongitude);

                if (distance <= 0.1) {
                    // User is within 0.1 miles of the bar, reset timer and redirect
                    resetTimerAndRedirect();
                } else {
                    alert("You are not within 0.1 miles of the bar.");
                }
            }, function(error) {
                alert("Error getting location: " + error.message);
            });
        } else {
            alert("Geolocation is not supported by your browser.");
        }
    });

    function calculateDistance(lat1, lon1, lat2, lon2) {
        var R = 3958.8; // Radius of the Earth in miles
        var dLat = (lat2 - lat1) * Math.PI / 180;
        var dLon = (lon2 - lon1) * Math.PI / 180;
        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
            Math.sin(dLon / 2) * Math.sin(dLon / 2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        var distance = R * c;
        return distance;
    }

    function resetTimerAndRedirect() {
        fetch('@Url.Action("ResetTimerAndGrantAccess", "Queue")')
            .then(response => {
                if (response.ok) {
                    window.location.href = '@Url.Action("GrantAccess", "Queue")';
                }
            })
            .catch(error => console.error('Error:', error));
    }

    var bannerImageUrl = '@ViewBag.BannerPicturePath' || 'https://brew-queue.com/Images/background.jpg'; // Initialize with a fallback
    var fallbackImageUrl = 'https://brew-queue.com/Images/background.jpg';
    var backgroundImageDiv = document.querySelector('.jumbotron.banner-background');

    // Set initial background image
    backgroundImageDiv.style.setProperty('--background-image-url', `url('${bannerImageUrl}')`);

    var image = new Image();
    image.src = bannerImageUrl;

    image.onerror = function() {
        // Fallback image
        backgroundImageDiv.style.setProperty('--background-image-url', `url('${fallbackImageUrl}')`);
        backgroundImageDiv.style.backgroundRepeat = 'no-repeat';
        backgroundImageDiv.style.backgroundSize = 'cover';
        backgroundImageDiv.style.backgroundPosition = 'center';
    };

    // Optional: If you want to confirm the image has loaded before setting it
    image.onload = function() {
        backgroundImageDiv.style.setProperty('--background-image-url', `url('${bannerImageUrl}')`);
        backgroundImageDiv.style.backgroundRepeat = 'no-repeat';
        backgroundImageDiv.style.backgroundSize = 'cover';
        backgroundImageDiv.style.backgroundPosition = 'center';
    };

    // Ensure the background image is initially set
    document.addEventListener('DOMContentLoaded', function () {
        backgroundImageDiv.style.backgroundImage = `var(--background-image-url)`;
        backgroundImageDiv.style.backgroundRepeat = 'no-repeat';
        backgroundImageDiv.style.backgroundSize = 'cover';
        backgroundImageDiv.style.backgroundPosition = 'center';
    });
</script>

<style>
    .btn-blue-md {
        display: block; /* Makes each button a block-level element */
        width: 100%; /* Ensures each button stretches to the full width of its container */
        padding: 14px 20px;
        font-size: 14px;
        line-height: 1.333333;
        color: #1e1e1e;
        background-color: rgb(64 255 154);
        border: 4px solid rgb(64 255 154);
        border-radius: 75px;
        margin-bottom: 10px; /* Adds space between the buttons */
        text-align: center; /* Center the text in the button */
        font-family: 'Comfortaa'
    }

    .jumbotron.banner-background {
        position: relative;
        min-width: 300px;
        color: #FFFFFF;
        z-index: 1;
        background-color: black; /* Fallback background color */
    }

    .jumbotron.banner-background::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: url('@ViewBag.BannerPicturePath');
        background-size: cover;
        background-position: center center;
        background-repeat: no-repeat;
        z-index: -2;
    }

    .jumbotron.banner-background::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: white;
        opacity: 0.5; /* Adjust the white overlay's opacity as needed */
        z-index: -1;
    }
</style>