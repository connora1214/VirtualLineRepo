@{
    var numberList = new SelectList(Enumerable.Range(1, 5), "1");
}

<head>
    <link href="https://fonts.googleapis.com/css2?family=Comfortaa:wght@300;400;500;600;700&display=swap" rel="stylesheet">

    <!-- Load Stripe.js -->
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        const stripe = Stripe('pk_live_51PosUXKRDYES0e4joslagjjSyRfja4sQ2cc9SobR9BW9fdgBworDV4EYpzWLPBbubtu2ELjSXqiIjWoMg85UZSzz00gD9SAsR9'); // Add your Stripe publishable key here

        var selectedQuantity = 1;

        function showCustomConfirm(credit, callbackYes, callbackNo) {
            var confirmBox = document.getElementById('customConfirm');
            var confirmMessage = document.getElementById('confirmMessage');
            var creditAmount = document.getElementById('creditAmount');

            // Update the message with the credit amount
            confirmMessage.innerText = "Do you want to use your BrewQueue credit to purchase?";
            creditAmount.innerText = "BrewQueue Credit: " + credit;

            confirmBox.style.display = 'block';

            document.getElementById('confirmYes').onclick = function () {
                confirmBox.style.display = 'none';
                callbackYes();
            };

            document.getElementById('confirmNo').onclick = function () {
                confirmBox.style.display = 'none';
                callbackNo();
            };
        }

        function getPricePointFromServer(quantity) {
            // Make an AJAX request to the server to get the price point
            fetch('/Queue/getPriceInfo?quantity=' + quantity)
                .then(response => response.json())
                .then(data => {
                    if (data.loggedIn == true) {
                        if (data.PriceType == "Free") {
                            document.getElementById("btnSubmit").click();
                        } else {
                            if (data.credit >= data.price) {
                                showCustomConfirm(
                                    data.credit,
                                    function () {
                                        fetch('/Queue/UseCredit?price=' + data.price)
                                            .then(response => response.json())
                                            .then(data => {
                                                document.getElementById("btnSubmit").click();
                                            })
                                    },
                                    function () {
                                        triggerStripeCheckout(quantity);
                                    }
                                );
                            } else {
                                triggerStripeCheckout(quantity);
                            }
                        }
                    } else {
                        window.location.href = '@Url.Action("MyAccount", "Home")';
                    }
                })
                .catch(error => console.error('Error fetching price point:', error));
        }

        function triggerIAP() {
            getPricePointFromServer(selectedQuantity);
        }

        function handleQuantityChange() {
            // Update the selectedQuantity variable with the new value of the dropdown list
            selectedQuantity = parseInt(document.getElementById("numberSelect").value);
        }

        function triggerStripeCheckout(quantity) {
            fetch('/Queue/CreateCheckoutSession', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    quantity: quantity,
                }),
            })
                .then((response) => response.json())
                .then((data) => {
                    return stripe.redirectToCheckout({ sessionId: data.id }); // Correctly passing sessionId as a string
                })
                .then((result) => {
                    if (result.error) {
                        alert(result.error.message);
                    }
                })
                .catch((error) => {
                    console.error('Error in triggering Stripe Checkout:', error);
                });
        }

    </script>
</head>

<div class="jumbotron text-center banner-background"
     style="@(String.IsNullOrEmpty(ViewBag.BannerPicturePath) ?
             "min-width: 300px;" :
             $"")">
    <div style="margin-bottom: 10px">
        @if (!String.IsNullOrEmpty(ViewBag.ProfilePicturePath))
        {
            <img src="@ViewBag.ProfilePicturePath" onerror="this.onerror=null; this.src='@ViewBag.DefaultProfilePicturePath';" alt="Profile Picture" style="max-width: 100px; max-height: 100px; border-radius: 50%;" />
        }
        else
        {
            <img src="@ViewBag.DefaultProfilePicturePath" alt="Profile Picture" style="max-width: 100px; max-height: 100px; border-radius: 50%;" />
        }
    </div>
    <div>
        <h1 style="font-family: 'Comfortaa'; color: #000000; text-shadow: 0 0 15px rgb(255 255 255);">@ViewBag.Venue</h1>
    </div>
    <div id="customConfirm" style="display:none; color:#1e1e1e; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; padding: 20px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); z-index: 1000;">
        <p id="confirmMessage" style="color: #1e1e1e; font-size: 14px; font-weight: bold">Do you want to use your BrewQueue credit to purchase?</p>
        <p id="creditAmount" style="color: #1e1e1e"></p>
        <button id="confirmNo" class="btn btn-blue-md">No</button>
        <button id="confirmYes" class="btn btn-blue-md" style="margin-right: 10px;">Yes</button>
    </div>
</div>

<div class="jumbotron text-center" style="font-family: 'Comfortaa'; background-color: transparent">
    <div style="font-family: 'Comfortaa'; margin-top:5%">
        <h3 style="color: #FFFFFF">Estimated wait time:</h3>
        <h3 style="margin-bottom: 20px; color:#FFFFFF">@ViewBag.Message</h3>
        @using (Html.BeginForm("AddToQueue", "Queue", FormMethod.Post, new { id = "AddToQueueForm" }))
        {
            <label for="numberSelect" style="font-family: 'Comfortaa'; margin-top: 5%; margin-bottom: 5%; color: #FFFFFF">Select a Quantity:</label>
            @Html.DropDownList("numberSelect", numberList, null, new { @style = " color: #1e1e1e; font-family: 'Comfortaa'", onchange = "handleQuantityChange()" })

            <button style="visibility:hidden" id="btnSubmit" type="submit" class="btn btn-blue-md">Join Line</button>
        }
        <button onclick="triggerIAP()" class="btn btn-blue-md">Join Line</button>
    </div>
</div>

<style>
    .btn-blue-md {
        display: block;
        width: 100%;
        padding: 14px 20px;
        font-size: 14px;
        line-height: 1.333333;
        color: #1e1e1e;
        background-color: rgb(64 255 154);
        border: 4px solid rgb(64 255 154);
        border-radius: 75px;
        margin-bottom: 10px;
        text-align: center;
        font-family: 'Comfortaa'
    }

    .jumbotron.banner-background {
        position: relative;
        min-width: 300px;
        color: #FFFFFF;
        z-index: 1;
        background-color: black;
    }

    .jumbotron.banner-background::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: url('@ViewBag.BannerPicturePath');
        background-size: cover;
        background-position: center center;
        background-repeat: no-repeat;
        z-index: -2;
    }

    .jumbotron.banner-background::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: white;
        opacity: 0.5;
        z-index: -1;
    }
</style>

<script>
    var bannerImageUrl = '@ViewBag.BannerPicturePath' || 'https://brew-queue.com/Images/background.jpg'; // Initialize with a fallback
    var fallbackImageUrl = 'https://brew-queue.com/Images/background.jpg';
    var backgroundImageDiv = document.querySelector('.jumbotron.banner-background');

    // Set initial background image
    backgroundImageDiv.style.setProperty('--background-image-url', `url('${bannerImageUrl}')`);

    var image = new Image();
    image.src = bannerImageUrl;

    image.onerror = function() {
        backgroundImageDiv.style.setProperty('--background-image-url', `url('${fallbackImageUrl}')`);
        backgroundImageDiv.style.backgroundRepeat = 'no-repeat';
        backgroundImageDiv.style.backgroundSize = 'cover';
        backgroundImageDiv.style.backgroundPosition = 'center';
    };

    image.onload = function() {
        backgroundImageDiv.style.setProperty('--background-image-url', `url('${bannerImageUrl}')`);
        backgroundImageDiv.style.backgroundRepeat = 'no-repeat';
        backgroundImageDiv.style.backgroundSize = 'cover';
        backgroundImageDiv.style.backgroundPosition = 'center';
    };

    document.addEventListener('DOMContentLoaded', function () {
        backgroundImageDiv.style.backgroundImage = `var(--background-image-url)`;
        backgroundImageDiv.style.backgroundRepeat = 'no-repeat';
        backgroundImageDiv.style.backgroundSize = 'cover';
        backgroundImageDiv.style.backgroundPosition = 'center';
    });
</script>
