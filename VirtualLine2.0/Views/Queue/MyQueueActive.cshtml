<head>
    <link href="https://fonts.googleapis.com/css2?family=Comfortaa:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>

<div class="jumbotron text-center banner-background"
     style="@(String.IsNullOrEmpty(ViewBag.BannerPicturePath) ?
             "min-width: 300px;" :
             $"")">
    <div style="margin-bottom: 10px">
        @if (!String.IsNullOrEmpty(ViewBag.ProfilePicturePath))
        {
            <img src="@ViewBag.ProfilePicturePath" onerror="this.onerror=null; this.src='@ViewBag.DefaultProfilePicturePath';" alt="Profile Picture" style="max-width: 100px; max-height: 100px; border-radius: 50%;" />
        }
        else
        {
            <img src="@ViewBag.DefaultProfilePicturePath" alt="Profile Picture" style="max-width: 100px; max-height: 100px; border-radius: 50%;" />
        }
    </div>
    <div>
        <h1 style="font-family: 'Comfortaa'; color: #000000; text-shadow: 0 0 15px rgb(255 255 255);">@ViewBag.Venue</h1>
    </div>
</div>

<div class="jumbotron text-center" style="font-family: 'Comfortaa'; background-color: transparent; color: #FFFFFF">
    <h3 style="color: #FFFFFF">Estimated wait time:</h3>
    <h3 style="margin-bottom: 50px; color: #FFFFFF">@ViewBag.Message</h3>
    @using (Html.BeginForm("RemoveFromQueue", "Queue", FormMethod.Post))
    {
        <button class="btn btn-red-md" type="submit">Leave Line</button>
    }
</div>

<style>
    .btn-red-md {
        display: block; /* Makes each button a block-level element */
        width: 100%; /* Ensures each button stretches to the full width of its container */
        padding: 14px 20px;
        font-size: 14px;
        line-height: 1.333333;
        color: #1e1e1e;
        background-color: #ff0000;
        border-radius: 75px;
        margin-bottom: 10px; /* Adds space between the buttons */
        text-align: center; /* Center the text in the button */
        font-family: 'Comfortaa'
    }

    .jumbotron.banner-background {
        position: relative;
        min-width: 300px;
        color: #FFFFFF;
        z-index: 1;
        background-color: black; /* Fallback background color */
    }

    .jumbotron.banner-background::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: url('@ViewBag.BannerPicturePath');
        background-size: cover;
        background-position: center center;
        background-repeat: no-repeat;
        z-index: -2;
    }

    .jumbotron.banner-background::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: white;
        opacity: 0.5; /* Adjust the white overlay's opacity as needed */
        z-index: -1;
    }
</style>

<script>
    var bannerImageUrl = '@ViewBag.BannerPicturePath' || 'https://brew-queue.com/Images/background.jpg'; // Initialize with a fallback
    var fallbackImageUrl = 'https://brew-queue.com/Images/background.jpg';
    var backgroundImageDiv = document.querySelector('.jumbotron.banner-background');

    // Set initial background image
    backgroundImageDiv.style.setProperty('--background-image-url', `url('${bannerImageUrl}')`);

    var image = new Image();
    image.src = bannerImageUrl;

    image.onerror = function() {
        // Fallback image
        backgroundImageDiv.style.setProperty('--background-image-url', `url('${fallbackImageUrl}')`);
        backgroundImageDiv.style.backgroundRepeat = 'no-repeat';
        backgroundImageDiv.style.backgroundSize = 'cover';
        backgroundImageDiv.style.backgroundPosition = 'center';
    };

    // Optional: If you want to confirm the image has loaded before setting it
    image.onload = function() {
        backgroundImageDiv.style.setProperty('--background-image-url', `url('${bannerImageUrl}')`);
        backgroundImageDiv.style.backgroundRepeat = 'no-repeat';
        backgroundImageDiv.style.backgroundSize = 'cover';
        backgroundImageDiv.style.backgroundPosition = 'center';
    };

    // Ensure the background image is initially set
    document.addEventListener('DOMContentLoaded', function () {
        backgroundImageDiv.style.backgroundImage = `var(--background-image-url)`;
        backgroundImageDiv.style.backgroundRepeat = 'no-repeat';
        backgroundImageDiv.style.backgroundSize = 'cover';
        backgroundImageDiv.style.backgroundPosition = 'center';
    });
</script>

<script>
    function checkUserPosition() {
        fetch('@Url.Action("GetUserPosition", "Queue")')
            .then(response => response.json())
            .then(data => {
                if (data.timerStarted) {
                    clearInterval(positionCheckInterval);
                    window.location.href = '@Url.Action("Timer", "Queue")';
                }
                else {
                    if (data.waitTime <= 15) {
                        clearInterval(positionCheckInterval);
                        window.location.href = '@Url.Action("ReadyToEnter", "Queue")';
                    }
                }
            })
            .catch(error => console.error('Error:', error));
    }

    var positionCheckInterval = setInterval(checkUserPosition, 10000); // Check every 10 seconds
</script>