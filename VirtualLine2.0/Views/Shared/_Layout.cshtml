<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - BrewQueue</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Home", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">                    
                    <li>@Html.ActionLink("My Queue", "MyQueue", "Queue")</li>
                    <li>@Html.ActionLink("MyAccount", "MyAccount", "Home")</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - BrewQueue</p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html>

<script>
    function checkUserPosition() {
        fetch('@Url.Action("GetUserPosition", "Queue")')
            .then(response => response.json())
            .then(data => {
                if (data.position >= 0 && data.position < 6 && !data.timerStarted) {
                    clearInterval(positionCheckInterval);
                    window.location.href = '@Url.Action("startTimer", "Queue")';
                }
            })
            .catch(error => console.error('Error:', error));
    }

    var positionCheckInterval = setInterval(checkUserPosition, 10000); // Check every 10 seconds
</script>

<script>
    function checkServerTimer() {
        fetch('@Url.Action("CheckTimer", "Queue", new { isFromTimerPage = false }))')
            .then(response => response.json())
            .then(data => {
                if (!data.isAuthenticated) {
                    // User is not authenticated, stop checking
                    clearInterval(timerId);
                    return;
                }

                if (!data.isInQueue) {
                    // User is not in the queue or timer isn't running
                    clearInterval(timerId);
                    return;
                }

                if (data.expired) {
                    clearInterval(timerId);
                    window.location.href = '@Url.Action("RemovedFromLine", "Queue")';
                }

                // Update timer display as needed
            })
            .catch(error => console.error('Error:', error));
    }

    var timerId = setInterval(checkServerTimer, 1000); // Check every second
</script>
